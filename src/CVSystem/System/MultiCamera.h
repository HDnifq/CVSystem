#pragma once

#include "FrameProc.h"

namespace dxlib {

///-------------------------------------------------------------------------------------------------
/// <summary> 使用单线程来采图加处理的MultiCamera. </summary>
///
/// <remarks> Dx, 2019/3/5. </remarks>
///-------------------------------------------------------------------------------------------------
class MultiCamera
{
  public:
    MultiCamera();
    ~MultiCamera();
    static MultiCamera* GetInst()
    {
        if (m_pInstance == NULL)
            m_pInstance = new MultiCamera();
        return m_pInstance;
    }

    ///-------------------------------------------------------------------------------------------------
    /// <summary>
    /// 打开相机会启动线程函数,目前一般尝试创建一个线程来计算,
    /// 这里需要做一个预先的激活proc的设置（activeIndex赋值）,
    /// 以便第一帧运行就能正确的执行到想要的proc.
    /// 如果相机打开失败的话那么就不会创建分析线程。采图线程也不会创建了.
    /// </summary>
    ///
    /// <remarks> Dx, 2018/2/1. </remarks>
    ///
    /// <returns> 打开成功返回ture. </returns>
    ///-------------------------------------------------------------------------------------------------
    bool openCamera();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 关闭所有相机. </summary>
    ///
    /// <remarks> Dx, 2020/2/26. </remarks>
    ///-------------------------------------------------------------------------------------------------
    void closeCamera();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 启动计算线程. </summary>
    ///
    /// <remarks> Dx, 2020/2/26. </remarks>
    ///-------------------------------------------------------------------------------------------------
    void start(uint activeProcindex = 0);

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 停止计算线程. </summary>
    ///
    /// <remarks> Dx, 2020/2/26. </remarks>
    ///-------------------------------------------------------------------------------------------------
    void stop();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 添加一个Proc. </summary>
    ///
    /// <remarks> Dx, 2019/1/10. </remarks>
    ///
    /// <param name="proc"> The proc. </param>
    ///-------------------------------------------------------------------------------------------------
    void addProc(const pFrameProc& proc);

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 添加一个Proc. </summary>
    ///
    /// <remarks> Dx, 2019/1/10. </remarks>
    ///
    /// <param name="proc"> [in,out] If non-null, the proc. </param>
    ///-------------------------------------------------------------------------------------------------
    void addProc(FrameProc* proc);

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 得到一个Proc. </summary>
    ///
    /// <remarks> Dx, 2020/2/26. </remarks>
    ///
    /// <param name="index"> index. </param>
    ///
    /// <returns> 处理对象. </returns>
    ///-------------------------------------------------------------------------------------------------
    FrameProc* getProc(uint index);

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 当前激活的Proc的index. </summary>
    ///
    /// <remarks> Surface, 2019/3/20. </remarks>
    ///
    /// <returns> 当前激活的Proc的index. </returns>
    ///-------------------------------------------------------------------------------------------------
    uint activeProcIndex();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 得到所有的proc. </summary>
    ///
    /// <remarks> Dx, 2020/2/26. </remarks>
    ///
    /// <returns> 处理对象. </returns>
    ///-------------------------------------------------------------------------------------------------
    std::vector<pFrameProc> getAllProc();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 当前激活的Proc. </summary>
    ///
    /// <remarks> Dx, 2019/3/24. </remarks>
    ///
    /// <returns> 当前激活的Proc的指针,为空表示没有proc. </returns>
    ///-------------------------------------------------------------------------------------------------
    FrameProc* activeProc();

    ///-------------------------------------------------------------------------------------------------
    /// <summary>
    /// 清空所有Proc
    /// </summary>
    ///
    /// <remarks> Dx, 2019/3/21. </remarks>
    ///-------------------------------------------------------------------------------------------------
    void clearProc();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 设置当前是否采图，主要是为了在不需要采图的手减少开销. </summary>
    ///
    /// <remarks>
    /// 如果不采图那么处理线程就会一直不停的休眠 Dx, 2018/11/20.
    /// </remarks>
    ///
    /// <param name="isGrab"> 如果是真就是采图. </param>
    ///-------------------------------------------------------------------------------------------------
    void setIsGrab(bool isGrab);

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 当前的抓图状态,如果不采图那么处理线程就会一直不停的休眠. </summary>
    ///
    /// <remarks> Surface, 2019/3/20. </remarks>
    ///
    /// <returns> 如果是真就是采图. </returns>
    ///-------------------------------------------------------------------------------------------------
    bool isGrab();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 是否相机已经打开. </summary>
    ///
    /// <remarks> Dx, 2020/2/26. </remarks>
    ///
    /// <returns>
    /// True if camera opened, false if not.
    /// </returns>
    ///-------------------------------------------------------------------------------------------------
    bool isCameraOpened();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 是否当前计算线程正在工作. </summary>
    ///
    /// <remarks> Dx, 2019/1/16. </remarks>
    ///
    /// <returns> True if run, false if not. </returns>
    ///-------------------------------------------------------------------------------------------------
    bool isRunning();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 当前执行的proc的名字,如果没有proc就返回null. </summary>
    ///
    /// <remarks> Surface, 2019/3/20. </remarks>
    ///
    /// <returns> 前执行的proc的名字. </returns>
    ///-------------------------------------------------------------------------------------------------
    const char* activeProcName();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 当前帧数. </summary>
    ///
    /// <remarks> Dx, 2020/2/26. </remarks>
    ///
    /// <returns> An uint. </returns>
    ///-------------------------------------------------------------------------------------------------
    uint frameCount();

    ///-------------------------------------------------------------------------------------------------
    /// <summary> 当前工作的FPS. </summary>
    ///
    /// <remarks> Dx, 2020/2/26. </remarks>
    ///
    /// <returns> A float. </returns>
    ///-------------------------------------------------------------------------------------------------
    float fps();

  private:
    static MultiCamera* m_pInstance;

    // 隐藏成员.
    class Impl;
    Impl* _impl;
};

} // namespace dxlib